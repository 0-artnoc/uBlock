@keyframes spin {
    0% { transform: rotate(0deg); -webkit-transform: rotate(0deg); }
    100% { transform: rotate(360deg); -webkit-transform: rotate(360deg); }
    }
ul {
    list-style-type: none;
    padding-left: 1em;
    padding-right: 0;
    }
body[dir="rtl"] ul {
    padding-left: 0;
    padding-right: 1em;
    }
ul.root {
    padding: 0;
    }
#options li {
    margin-bottom: 0.5em;
    }
#listsOfBlockedHostsPrompt {
    cursor: pointer;
    }
#listsOfBlockedHostsPrompt:before {
    color: #888;
    content: '\2212  ';
    }
body.hideUnused #listsOfBlockedHostsPrompt:before {
    content: '+  ';
    }
#lists {
    margin: 0.5em 0 0 0;
    padding: 0;
    }
#lists > li {
    margin: 0.5em 0 0 0;
    padding: 0;
    list-style-type: none;
    }
#lists > .groupEntry .geDetails {
    cursor: pointer;
    }
#lists > .groupEntry .geDetails:before {
    color: #888;
    content: '\2212  ';
    }
#lists > .groupEntry.hideUnused .geDetails:before {
    content: '+  ';
    }
#lists > .groupEntry .geName {
    pointer-events: none;
    }
#lists > .groupEntry .geCount {
    font-size: 90%;
    pointer-events: none;
    }
#lists > .groupEntry > ul {
    margin: 0.25em 0 0 0;
    padding-left: 1em;
    }
li.listEntry {
    margin: 0 auto 0 auto;
    padding: 0.2em 0;
    white-space: nowrap;
    }
body[dir="rtl"] li.listEntry {
    }
li.listEntry.unused {
    display: none;
    }
li.listEntry > * {
    margin-right: 0.5em;
    unicode-bidi: embed;
    }
li.listEntry.toRemove > input[type="checkbox"] {
    visibility: hidden;
    }
li.listEntry.toRemove > a.content {
    text-decoration: line-through;
    }
li.listEntry > .fa {
    color: inherit;
    display: none;
    font-size: 110%;
    opacity: 0.5;
    vertical-align: baseline;
    }
li.listEntry > a.towiki {
    display: inline-block;
    }
li.listEntry > a.fa:hover {
    opacity: 1;
    }
li.listEntry.support > a.support {
    display: inline-block;
    }
li.listEntry > a.remove,
li.listEntry > a.remove:visited {
    color: darkred;
    }
li.listEntry.external > a.remove {
    display: inline-block;
    }
li.listEntry.mustread > a.mustread {
    display: inline-block;
    }
li.listEntry.mustread > a.mustread:hover {
    color: mediumblue;
    }
li.listEntry > .counts {
    display: none;
    font-size: smaller;
}
li.listEntry > input[type="checkbox"]:checked ~ .counts {
    display: inline;
}
.dim {
    opacity: 0.6;
    }
#buttonApply {
    display: initial;
    position: fixed;
    right: 1em;
    z-index: 10;
    }
body[dir=rtl] #buttonApply {
    right: auto;
    left: 1em;
    }
#buttonApply.disabled {
    display: none;
    }
li.listEntry span.status {
    color: #444;
    cursor: default;
    display: none;
}
li.listEntry span.status:hover {
    opacity: 1;
    }
li.listEntry span.unsecure {
    color: darkred;
    }
li.listEntry.unsecure > input[type="checkbox"]:checked ~ span.unsecure {
    display: inline-block;
    }
li.listEntry span.failed {
    color: darkred;
    }
li.listEntry.failed span.failed {
    display: inline-block;
    }
li.listEntry span.cache {
    cursor: pointer;
    }
li.listEntry.cached:not(.obsolete) > input[type="checkbox"]:checked ~ span.cache {
    display: inline-block;
    }
li.listEntry span.obsolete {
    color: hsl(36, 100%, 40%);
    }
body:not(.updating) li.listEntry.obsolete > input[type="checkbox"]:checked ~ span.obsolete {
    display: inline-block;
    }
li.listEntry span.updating {
    transform-origin: 50% 46%;
    }
body.updating li.listEntry.obsolete > input[type="checkbox"]:checked ~ span.updating {
    animation: spin 2s linear infinite;
    display: inline-block;
    }
li.listEntry.toImport > input[type="checkbox"] ~ textarea {
    border: 1px solid #ccc;
    box-sizing: border-box;
    display: block;
    font-size: smaller;
    height: 6em;
    margin-left: 2em;
    resize: vertical;
    visibility: hidden;
    white-space: pre;
    width: calc(100% - 4em);
    }
li.listEntry.toImport > input[type="checkbox"]:checked ~ textarea {
    visibility: visible;
    }
